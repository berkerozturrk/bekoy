public class Solution
{
    public double FindMedianSortedArrays(int[] nums1, int[] nums2)
    {
        // Ensure nums1 is the smaller array to optimize binary search steps
        if (nums1.Length > nums2.Length)
            return FindMedianSortedArrays(nums2, nums1);

        int x = nums1.Length; // Smaller array
        int y = nums2.Length; // Larger array
        int low = 0, high = x; // Binary search boundaries for partitionX

        while (low <= high)
        {
            // Partition point in nums1 (smaller array)
            int partitionX = (low + high) / 2;
            // Partition point in nums2 (derived to balance left/right elements)
            int partitionY = (x + y + 1) / 2 - partitionX;

            // Handle edge cases for partition boundaries
            int maxLeftX = (partitionX == 0) ? int.MinValue : nums1[partitionX - 1];
            int minRightX = (partitionX == x) ? int.MaxValue : nums1[partitionX];

            int maxLeftY = (partitionY == 0) ? int.MinValue : nums2[partitionY - 1];
            int minRightY = (partitionY == y) ? int.MaxValue : nums2[partitionY];

            // Check if partitions are correct
            if (maxLeftX <= minRightY && maxLeftY <= minRightX)
            {
                // Even length
                if ((x + y) % 2 == 0)
                    return ((double)Math.Max(maxLeftX, maxLeftY) + Math.Min(minRightX, minRightY)) / 2;
                else // Odd length
                    return (double)Math.Max(maxLeftX, maxLeftY);
            }
            else if (maxLeftX > minRightY)
            {
                // Move towards left in nums1
                high = partitionX - 1;
            }
            else
            {
                // Move towards right in nums1
                low = partitionX + 1;
            }
        }

        throw new ArgumentException("Input arrays are not sorted properly.");
    }
}
